{
  "version": 3,
  "sources": ["../../node_modules/.cache/sb-vite-plugin-externals/@storybook/preview-api.js", "../../node_modules/@whitespace/storybook-addon-html/src/withHTML.ts", "../../node_modules/@whitespace/storybook-addon-html/src/constants.ts", "../../node_modules/@whitespace/storybook-addon-html/src/preview.ts"],
  "sourcesContent": ["module.exports = __STORYBOOK_MODULE_PREVIEW_API__;", "import { useChannel } from \"@storybook/preview-api\";\nimport type {\n  Renderer,\n  PartialStoryFn as StoryFunction,\n} from \"@storybook/types\";\nimport { EVENTS } from \"./constants\";\nimport { Parameters } from \"./types\";\n\nexport const withHTML = (\n  storyFn: StoryFunction<Renderer>,\n  {\n    parameters: { html: parameters = {} } = {},\n  }: { parameters?: { html?: Parameters } },\n) => {\n  const emit = useChannel({});\n\n  setTimeout(() => {\n    const rootSelector = parameters.root || \"#storybook-root, #root\";\n    const root = document.querySelector(rootSelector);\n    let code: string = root ? root.innerHTML : `${rootSelector} not found.`;\n    const { removeEmptyComments, removeComments, transform } = parameters;\n    if (removeEmptyComments) {\n      code = code.replace(/<!--\\s*-->/g, \"\");\n    }\n    if (removeComments === true) {\n      code = code.replace(/<!--[\\S\\s]*?-->/g, \"\");\n    } else if (removeComments instanceof RegExp) {\n      code = code.replace(/<!--([\\S\\s]*?)-->/g, (match, p1) =>\n        removeComments.test(p1) ? \"\" : match,\n      );\n    }\n    if (typeof transform === \"function\") {\n      try {\n        code = transform(code);\n      } catch (e) {\n        console.error(e);\n      }\n    }\n    emit(EVENTS.CODE_UPDATE, { code, options: parameters });\n  }, 0);\n\n  return storyFn();\n};\n", "export const ADDON_ID = \"storybook/html\";\nexport const PANEL_ID = `${ADDON_ID}/panel`;\nexport const PARAM_KEY = `html`;\n\nexport const EVENTS = {\n  CODE_UPDATE: `${ADDON_ID}/codeUpdate`,\n};\n", "import type { Renderer, ProjectAnnotations } from \"@storybook/types\";\nimport { withHTML } from \"./withHTML\";\n\nconst preview: ProjectAnnotations<Renderer> = {\n  decorators: [withHTML],\n};\n\nexport default preview;\n"],
  "mappings": ";;;;;;AAAA;AAAA;AAAA,WAAO,UAAU;AAAA;AAAA;;;ACAjB,yBAA2B;;;;;;;;;;;;;;;;;",
  "names": []
}
